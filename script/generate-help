#!/usr/bin/env coffee

fs = require('fs')
_ = require('underscore')
marked = require('marked')

SKIP_EXPORTS = [
  'COUNTRY',
  'CURRENCYCODE',
  'CURRENCYSYMBOL',
  'DECIMALSEPARATOR',
  'GROUPINGSEPARATOR',
  'GROUPINGSIZE',
  'IFERROR',
  'ISERR',
  'ISERROR',
  'LANGUAGE',
  'LOCALE',
  'N',
  'T',
  'TIMEZONE',
  'X_ISNEW',
  'X_ISUPDATE'
]

class DocumentationGenerator
  generateDocs: (functions) ->
    _.map functions, (func) =>
      schema =
        name: func.name

      # strip out the function name if it starts with it
      description = @getDescription(func)

      parameters = @generateParameters(func.parameters)
      returns    = @generateReturns(func.returns)
      examples   = @generateExamples(func.examples)

      schema.markdown = """
    ## #{func.name}

    #{description}

    ### Parameters

    #{parameters}

    ### Returns

    #{returns}

    ### Examples

    #{examples}
    """

      schema.fullMarkdown = @helpFrontMatter(func) + "\n\n" + schema.markdown

      schema

  generateParameters: (parameters) ->
    parameters = _.map parameters, (param) ->
      optionality = if param.optional is true then ' (optional) ' else ' (__required__) '
      defaultValue = if param.default.length is 0 then '' else " [default = #{param.default}] "
      "`#{param.name}` #{param.type}#{optionality}#{defaultValue}- #{param.description}"

    if parameters.length is 0
      'No parameters'
    else
      parameters.join("\n\n").trim()

  generateReturns: (returns) ->
    description = if returns.description.length is 0 then '' else " - #{returns.description} "
    markdown = 'No return value'
    markdown = "#{returns.type}#{description}" if returns.type
    markdown.trim()

  generateExamples: (examples) ->
    examples = _.map examples, (example) ->
      parts = example.split("\n")
      returns = parts[0]
      rest = parts.slice(1)
      final = rest.concat(["\n#{returns}"]).join("\n")
      "\n~~~\n#{final}\n~~~\n{: .language-js}"

    if examples.length is 0
      'No examples'
    else
      examples.join("\n\n").trim()

  getDescription: (func) ->
    func.description.replace(new RegExp("^#{func.name}\n"), '').trim()

  generateIndex: (functions) ->
    titles = _.map functions, (func) =>
      "### [#{func.name}](/developers/expressions/#{func.name.toLowerCase()})\n\n#{@getDescription(func)}"

    """
---
layout: docs
category: expressions
section: developers
class: docs
title: "Developers | Expressions"
description: Expressions
developer: true
permalink: /developers/expressions/
---

#{titles.join("\n\n")}
"""

  cleanDescription: (func) ->
    marked(@getDescription(func)).replace(/(<([^>]+)>)/ig, '').replace(/\n/g, ' ').trim()

  helpFrontMatter: (func) ->
    """
---
layout: docs
category: expressions
section: developers
class: docs
title: "Developers | Expressions | #{func.name}"
description: "#{@cleanDescription(func)}"
developer: true
permalink: /developers/expressions/#{func.name.toLowerCase()}/
---
"""

  generateAppHelp: (functions) ->
    functions = _.map functions, (func) =>
      desc = @getDescription(func)
      desc = marked(desc.replace(/\n/g, "\\n")).replace(/^<p>/, '').replace(/<\/p>\n$/, '')
      tip = desc.replace(/(<([^>]+)>)/ig, '').replace(/\n/g, ' ').trim()

      "    { identifier: \"#{func.name}\", description: \"#{desc}\", tip: \"#{tip}\" }"

    """
    class window.ExpressionFunctions
      @FUNCTIONS: [
#{functions.join("\n")}
      ]
    """

docs = JSON.parse(fs.readFileSync('./docs/docs.json'))

includeExport = (name) ->
  _.indexOf(SKIP_EXPORTS, name) is -1

functions = _.select docs.functions, (func) -> includeExport(func.name)

generator = new DocumentationGenerator

files = generator.generateDocs(functions)
index = generator.generateIndex(functions)
help  = generator.generateAppHelp(functions)

_.each files, (file) ->
  fs.writeFileSync("./docs/output/help/#{file.name.toLowerCase()}.md", file.fullMarkdown)

fs.writeFileSync("./docs/output/help/index.md", index)

fs.writeFileSync("./docs/output/functions.coffee", help)
