{
    "functions": [
        {
            "name": "ABS",
            "access": "",
            "virtual": false,
            "description": "ABS\nReturns the absolute value of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number of which to return the absolute value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nABS(-1)",
                "// returns 42\nABS(42)"
            ],
            "returns": {
                "type": "Number",
                "description": "the absolute value of the `value` parameter"
            }
        },
        {
            "name": "ACOS",
            "access": "",
            "virtual": false,
            "description": "ACOS\nReturns the inverse cosine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the inverse cosine. Must be between -1 and 1, inclusive.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.6435011087932843\nACOS(0.8)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ACOSH",
            "access": "",
            "virtual": false,
            "description": "ACOSH\nReturns the inverse hyperbolic cosine of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the inverse hyperbolic cosine. Must be greater than or equal to 1.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.6339157938496336\nACOSH(7)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "AND",
            "access": "",
            "virtual": false,
            "description": "AND\nReturns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false.",
            "parameters": [
                {
                    "name": "var_args_expressions",
                    "type": "*",
                    "description": "An expression or reference that represents some logical value, i.e. `true` or `false`, or an expression that can be converted to a logical value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns false\nAND(1, 0, false)",
                "// returns true\nAND(3 + 3 == 6, 10 + 2 == 12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "AVERAGE",
            "access": "",
            "virtual": false,
            "description": "AVERAGE\nReturns the numerical average value in a dataset, ignoring text.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "values to use when calculating the average value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2\nAVERAGE(1, 2, 3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CEILING",
            "access": "",
            "virtual": false,
            "description": "CEILING\nRounds a number up to the nearest integer multiple of specified significance.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round up to the nearest integer multiple of factor.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "factor",
                    "type": "Number",
                    "description": "The number to whose multiples value will be rounded.",
                    "default": "1",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 139.9\nCEILING(139.85, 0.1)",
                "// returns 140\nCEILING(139.001)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CHAR",
            "access": "",
            "virtual": false,
            "description": "CHAR\nConvert a number into a character according to the current Unicode table.",
            "parameters": [
                {
                    "name": "number",
                    "type": "Number",
                    "description": "The number of the character to look up from the current Unicode table in decimal format.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns A\nCHAR(65)",
                "// returns ิน\nCHAR(1337)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "CLEAN",
            "access": "",
            "virtual": false,
            "description": "CLEAN\nReturns the text with the non-printable ASCII characters removed.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "The text whose non-printable characters are to be removed.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Test\nCLEAN('Test' + CHAR(31))"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "COALESCE",
            "access": "",
            "virtual": false,
            "description": "COALESCE\nReturns the first parameter whose value exists",
            "parameters": [
                {
                    "name": "parameters",
                    "type": "*",
                    "description": "The value to return if it exists",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Test\nCOALESCE(null, null, 'Test', 1)",
                "// returns 1\nCOALESCE(1, null, null)",
                "// returns undefined\nCOALESCE(null, null, null)"
            ],
            "returns": {
                "type": "*",
                "description": "The first parameter that exists"
            }
        },
        {
            "name": "CODE",
            "access": "",
            "virtual": false,
            "description": "CODE\nReturns the numeric Unicode map value of the first character in the string provided.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "The string whose first character's Unicode map value will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 84\nCODE('Test')"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COMPACT",
            "access": "",
            "virtual": false,
            "description": "COMPACT\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCOMPACT()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CONCATENATE",
            "access": "",
            "virtual": false,
            "description": "CONCATENATE\nReturns the concatenation of multiple values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "String",
                    "description": "Strings to append in sequence.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns This is a sentence.\nCONCATENATE(\"This \", \"is \", \"a \", \"sentence.\")",
                "// returns 42311\nCONCATENATE(42, 31, 1)",
                "// returns Age is 42\nCONCATENATE(\"Age \", \"is \", 42)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "COS",
            "access": "",
            "virtual": false,
            "description": "COS\nReturns the cosine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the cosine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.15425144988758405\nCOS(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COSH",
            "access": "",
            "virtual": false,
            "description": "COSH\nReturns the hyperbolic cosine of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The real number for which to calculate the hyperbolic cosine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.5430806348152437\nCOSH(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COUNT",
            "access": "",
            "virtual": false,
            "description": "COUNT\nReturns a count of the number of numeric values in a dataset.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Value to include in the count.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCOUNT()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "COUNTA",
            "access": "",
            "virtual": false,
            "description": "COUNTA\nReturns a count of the number of values in a dataset.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCOUNTA()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COUNTBLANK",
            "access": "",
            "virtual": false,
            "description": "COUNTBLANK\nReturns the number of blank values in a dataset.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCOUNTBLANK()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "COUNTRY",
            "access": "",
            "virtual": false,
            "description": "COUNTRY\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCOUNTRY()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CURRENCYCODE",
            "access": "",
            "virtual": false,
            "description": "CURRENCYCODE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCURRENCYCODE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "CURRENCYSYMBOL",
            "access": "",
            "virtual": false,
            "description": "CURRENCYSYMBOL\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nCURRENCYSYMBOL()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DATE",
            "access": "",
            "virtual": false,
            "description": "DATE\nConverts a provided year, month, and day into a date.",
            "parameters": [
                {
                    "name": "year",
                    "type": "Number",
                    "description": "year",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "month",
                    "type": "Number",
                    "description": "month",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "day",
                    "type": "Number",
                    "description": "day",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015-12-16\nDATE(2015, 12, 16)"
            ],
            "returns": {
                "type": "Date",
                "description": ""
            }
        },
        {
            "name": "DATEADD",
            "access": "",
            "virtual": false,
            "description": "DATEADD\nAdds a number of days to a given date",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "days",
                    "type": "Number",
                    "description": "the number of days to add",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015-01-11\nDATEADD('2015-01-01', 10)",
                "// returns 2015-05-01\nDATEADD('2015-01-31', 90)"
            ],
            "returns": {
                "type": "Date",
                "description": ""
            }
        },
        {
            "name": "DATEVALUE",
            "access": "",
            "virtual": false,
            "description": "DATEVALUE\nConverts a provided date string in a known format to a date value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nDATEVALUE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DAY",
            "access": "",
            "virtual": false,
            "description": "DAY\nReturns the day of the month that a specific date falls on, in numeric format.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nDAY()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DECIMALSEPARATOR",
            "access": "",
            "virtual": false,
            "description": "DECIMALSEPARATOR\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nDECIMALSEPARATOR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DEGREES",
            "access": "",
            "virtual": false,
            "description": "DEGREES\nConverts an angle value in radians to degrees.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number in radians.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 57.29577951308232\nDEGREES(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "DOLLAR",
            "access": "",
            "virtual": false,
            "description": "DOLLAR\nFormats a number into the locale-specific currency format.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nDOLLAR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "EVEN",
            "access": "",
            "virtual": false,
            "description": "EVEN\nReturns number rounded up to the nearest even integer.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to round.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nEVEN(5.2)",
                "// returns 530\nEVEN(528.2172814)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "EXACT",
            "access": "",
            "virtual": false,
            "description": "EXACT\nTests whether two strings are identical.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "First string to compare.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "String",
                    "description": "Second string to compare.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nEXACT(\"String 1\", \"String 1\")",
                "// returns false\nEXACT(\"String 1\", \"Another String\")",
                "// returns true\nEXACT(4,4)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "EXP",
            "access": "",
            "virtual": false,
            "description": "EXP\nReturns Euler's number, e (~2.718) raised to a power.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Power to which to raise `e`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 20.085536923187668\nEXP(3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FACT",
            "access": "",
            "virtual": false,
            "description": "FACT\nReturns the factorial of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the factorial.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 120\nFACT(5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FACTDOUBLE",
            "access": "",
            "virtual": false,
            "description": "FACTDOUBLE\nReturns the double factorial of a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the double factorial.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 15\nFACTDOUBLE(5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FALSE",
            "access": "",
            "virtual": false,
            "description": "FALSE\nReturns the boolean value `false`.",
            "parameters": [],
            "examples": [
                "// returns false\nFALSE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "FIND",
            "access": "",
            "virtual": false,
            "description": "FIND\nReturns the position at which a string is first found within text, case-sensitive.",
            "parameters": [
                {
                    "name": "search_for",
                    "type": "String",
                    "description": "String to search for within `text_to_search`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "text_to_search",
                    "type": "String",
                    "description": "Text to search for the first instance of `search_for`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "starting_at",
                    "type": "Number",
                    "description": "argument Position index to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 15\nFIND(\"haystack\", \"Needle in the haystack\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FIXED",
            "access": "",
            "virtual": false,
            "description": "FIXED\nFormats a number with a fixed number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to format.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_places",
                    "type": "Number",
                    "description": "Number of decimal places to display in the result.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "Boolean",
                    "description": "Whether or not to suppress the thousands separator.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 3000.14\nFIXED(3000.141592, 2, true)",
                "// returns 6,276.222\nFIXED(6276.22241, 3, false)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "FLOOR",
            "access": "",
            "virtual": false,
            "description": "FLOOR\nRounds a number down to the nearest integer multiple of specified significance.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Number to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "significance",
                    "type": "Number",
                    "description": "The number to whose multiples `value` will be rounded.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 126\nFLOOR(126.25, 1)",
                "// returns 120\nFLOOR(126.25, 10)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "FORMATNUMBER",
            "access": "",
            "virtual": false,
            "description": "FORMATNUMBER\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nFORMATNUMBER()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "GCD",
            "access": "",
            "virtual": false,
            "description": "GCD\nReturns the greatest common divisor of one or more integers.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Value(s) to consider to calculate the greatest common divisor.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nGCD(5, 9)",
                "// returns 7\nGCD(14, 21, 42)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "GETRESULT",
            "access": "",
            "virtual": false,
            "description": "GETRESULT\nReturns the current result value for the current expression",
            "parameters": [],
            "examples": [
                "// returns 1\nSETRESULT(1)\nGETRESULT()"
            ],
            "returns": {
                "type": "*",
                "description": "the current result value"
            }
        },
        {
            "name": "GROUPINGSEPARATOR",
            "access": "",
            "virtual": false,
            "description": "GROUPINGSEPARATOR\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nGROUPINGSEPARATOR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "GROUPINGSIZE",
            "access": "",
            "virtual": false,
            "description": "GROUPINGSIZE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nGROUPINGSIZE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "HASOTHER",
            "access": "",
            "virtual": false,
            "description": "HASOTHER\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nHASOTHER()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "IF",
            "access": "",
            "virtual": false,
            "description": "IF\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nIF()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "IFERROR",
            "access": "",
            "virtual": false,
            "description": "IFERROR\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nIFERROR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "INSPECT",
            "access": "",
            "virtual": false,
            "description": "INSPECT\nReturns the string representation of a value. This function is useful for troubleshooting expressions.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to inspect",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [ 1, 2, 3 ]\nINSPECT([1, 2, 3])"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "INT",
            "access": "",
            "virtual": false,
            "description": "INT\nRounds a number down to the nearest integer that is less than or equal to it.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Value to round down to the nearest integer.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 34\nINT(34.24)",
                "// returns -11\nINT(-10.49)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ISBLANK",
            "access": "",
            "virtual": false,
            "description": "ISBLANK\nChecks whether the field's value is empty.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "Field value to check.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISBLANK(\"\")",
                "// returns false\nISBLANK(\"Test\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISERR",
            "access": "",
            "virtual": false,
            "description": "ISERR\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nISERR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ISERROR",
            "access": "",
            "virtual": false,
            "description": "ISERROR\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nISERROR()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ISEVEN",
            "access": "",
            "virtual": false,
            "description": "ISEVEN\nChecks whether the provided value is an even number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as even.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISEVEN(4)",
                "// returns false\nISEVEN(5)",
                "// returns true\nISEVEN(4.12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISLOGICAL",
            "access": "",
            "virtual": false,
            "description": "ISLOGICAL\nChecks whether a value is `true` or `false`.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to be verified as `true` or `false`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISLOGICAL(true)",
                "// returns false\nISLOGICAL(\"Text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISNAN",
            "access": "",
            "virtual": false,
            "description": "ISNAN\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nISNAN()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ISNONTEXT",
            "access": "",
            "virtual": false,
            "description": "ISNONTEXT\nTests whether a value is non-textual.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to test as non-text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISNONTEXT(4)",
                "// returns false\nISNONTEXT(\"Some text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISNUMBER",
            "access": "",
            "virtual": false,
            "description": "ISNUMBER\nTests whether a value is a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as a number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISNUMBER(10)",
                "// returns false\nISNUMBER(\"Some text\")"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISODD",
            "access": "",
            "virtual": false,
            "description": "ISODD\nChecks whether the provided value is an odd number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be verified as odd.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns false\nISODD(4)",
                "// returns true\nISODD(5)",
                "// returns true\nISODD(3.12)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISSELECTED",
            "access": "",
            "virtual": false,
            "description": "ISSELECTED\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "The choice field, classification field to check for a value being selected",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "choice",
                    "type": "String",
                    "description": "The choice value to check for",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISSELECTED({ choice_values: ['001', '002', '003'] }, '001')",
                "// returns false\nISSELECTED({ choice_values: ['001', '002', '003'] }, '004')"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "ISTEXT",
            "access": "",
            "virtual": false,
            "description": "ISTEXT\nChecks whether a value is text.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to test as text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nISTEXT(\"Text\")",
                "// returns false\nISTEXT(4)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "LANGUAGE",
            "access": "",
            "virtual": false,
            "description": "LANGUAGE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nLANGUAGE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LATITUDE",
            "access": "",
            "virtual": false,
            "description": "LATITUDE\nReturns the latitude of the current feature (record or repeatable item).",
            "parameters": [],
            "examples": [
                "// returns 27.770756908186286\nLATITUDE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LCM",
            "access": "",
            "virtual": false,
            "description": "LCM\nReturns the least common multiple of one or more integers.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Value(s) to consider to calculate the least common multiple.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nLCM(2, 5)",
                "// returns 660\nLCM(5, 22, 12)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LEFT",
            "access": "",
            "virtual": false,
            "description": "LEFT\nReturns a substring from the beginning of a given string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string value from which the left portion will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "The number of characters to return from the left side of the string.",
                    "default": "1",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Ful\nLEFT(\"Fulcrum\", 3)",
                "// returns F\nLEFT(\"Fulcrum\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "LEN",
            "access": "",
            "virtual": false,
            "description": "LEN\nReturns the length of a string value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string from which to return the length.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 30\nLEN(\"Fulcrum is for data collection\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LN",
            "access": "",
            "virtual": false,
            "description": "LN\nReturns the the logarithm of a number, base `e` (Euler's number).",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm, base `e`. Must be a positive number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.6094379124341003\nLN(5)",
                "// returns NaN\nLN(\"Test\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOCALE",
            "access": "",
            "virtual": false,
            "description": "LOCALE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nLOCALE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOG",
            "access": "",
            "virtual": false,
            "description": "LOG\nReturns the the logarithm of a number given a base.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm given `base`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "base",
                    "type": "Number",
                    "description": "The base to use for the logarithm calculation.",
                    "default": "10",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.8613531161467867\nLOG(100, 5)",
                "// returns 2\nLOG(100)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOG10",
            "access": "",
            "virtual": false,
            "description": "LOG10\nReturns the the logarithm of a number, base 10.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the logarithm, base 10.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2\nLOG10(100)",
                "// returns 1.6989700043360185\nLOG10(50)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LONGITUDE",
            "access": "",
            "virtual": false,
            "description": "LONGITUDE\nReturns the longitude of the current feature (record or repeatable item)",
            "parameters": [],
            "examples": [
                "// returns -82.63814896345139\nLONGITUDE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "LOWER",
            "access": "",
            "virtual": false,
            "description": "LOWER\nConverts a specified string to lowercase.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to lowercase.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns empire state building\nLOWER(\"Empire State Building\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "MATCH",
            "access": "",
            "virtual": false,
            "description": "MATCH\nReturns the relative position of an item in a range that matches a specified value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nMATCH()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MAX",
            "access": "",
            "virtual": false,
            "description": "MAX\nReturns the maximum value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the maximum value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 322\nMAX(3, 1, 322, 76)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MAXA",
            "access": "",
            "virtual": false,
            "description": "MAXA\nReturns the maximum numeric value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the maximum numeric value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nMAXA([3, 4, -6, '10'])"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MEDIAN",
            "access": "",
            "virtual": false,
            "description": "MEDIAN\nReturns the median value in a set of numeric values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the median value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 15\nMEDIAN(15,2,9,67,22)",
                "// returns 4\nMEDIAN(1,10,4)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MEMOIZED_FACT",
            "access": "",
            "virtual": false,
            "description": "MEMOIZED_FACT\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nMEMOIZED_FACT()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MEMOIZED_FACTDOUBLE",
            "access": "",
            "virtual": false,
            "description": "MEMOIZED_FACTDOUBLE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nMEMOIZED_FACTDOUBLE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MID",
            "access": "",
            "virtual": false,
            "description": "MID\nReturns a segment of a string value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to extract a segment from.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "start_position",
                    "type": "Number",
                    "description": "Index from the left of the string from which to begin extracting. First character is index `1`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "Number of characters to extract.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns iOS\nMID(\"Fulcrum for iOS\", 13, 3)"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "MIN",
            "access": "",
            "virtual": false,
            "description": "MIN\nReturns the minimum value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the minimum value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nMIN(3, 1, 322, 76)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MINA",
            "access": "",
            "virtual": false,
            "description": "MINA\nReturns the minimum numeric value in a given set of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values in which to find the minumum numeric value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns -6\nMINA([3, 4, -6, '10'])"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MOD",
            "access": "",
            "virtual": false,
            "description": "MOD\nReturns the result of the modulo operator, the remainder after a division operation.",
            "parameters": [
                {
                    "name": "dividend",
                    "type": "Number",
                    "description": "The number to be divided to find the remainder.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "divisor",
                    "type": "Number",
                    "description": "The number to divide by.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nMOD(10, 3)",
                "// returns 0\nMOD(10, 10)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "MONTH",
            "access": "",
            "virtual": false,
            "description": "MONTH\nReturns the month of a given date.",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "a date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 12\nMONTH(\"2015/12/16\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "N",
            "access": "",
            "virtual": false,
            "description": "N\nReturns the value provided as a number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be converted to a number.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 10\nN(10)",
                "// returns 1\nN(true)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "NOT",
            "access": "",
            "virtual": false,
            "description": "NOT\nReturns the opposite of a logical value - `NOT(true)` returns `false`; `NOT(false)` returns `true`.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Boolean",
                    "description": "The expression or value representing a logical value (`true` or `false`).",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nNOT(false)",
                "// returns false\nNOT(5)"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "NUM",
            "access": "",
            "virtual": false,
            "description": "NUM\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nNUM()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "NUMS",
            "access": "",
            "virtual": false,
            "description": "NUMS\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nNUMS()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ODD",
            "access": "",
            "virtual": false,
            "description": "ODD\nRounds a number up to the nearest odd integer.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number to round to the nearest odd integer.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 5\nODD(4.22)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ONCE",
            "access": "",
            "virtual": false,
            "description": "ONCE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nONCE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "OR",
            "access": "",
            "virtual": false,
            "description": "OR\nReturns `true` if any of the provided arguments are logically true, and `false` if all of the provided arguments are logically false.",
            "parameters": [
                {
                    "name": "var_args_expressions",
                    "type": "*",
                    "description": "An expression or reference that represents some logical value, i.e. `true` or `false`, or an expression that can be converted to a logical value.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nOR(true, true, false)",
                "// returns false\nOR(ISEVEN(5),ISODD(6))"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "OTHER",
            "access": "",
            "virtual": false,
            "description": "OTHER\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nOTHER()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PI",
            "access": "",
            "virtual": false,
            "description": "PI\nReturns the value of Pi to 15 decimal places.",
            "parameters": [],
            "examples": [
                "// returns 3.141592653589793\nPI()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "POWER",
            "access": "",
            "virtual": false,
            "description": "POWER\nReturns a number raised to a power.",
            "parameters": [
                {
                    "name": "base",
                    "type": "Number",
                    "description": "The number to be raised to the `exponent` power.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "exponent",
                    "type": "Number",
                    "description": "The exponent to raise `base` to.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 390625\nPOWER(5, 8)",
                "// returns 3.1622776601683795\nPOWER(10, 0.5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PRECISION",
            "access": "",
            "virtual": false,
            "description": "PRECISION\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nPRECISION()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PRODUCT",
            "access": "",
            "virtual": false,
            "description": "PRODUCT\nReturns the result of multiplying a series of numbers together.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to multiply together.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 216\nPRODUCT(4, 18, 3)",
                "// returns 0\nPRODUCT(23, 5, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "PROPER",
            "access": "",
            "virtual": false,
            "description": "PROPER\nCapitalizes each word in a string (title case).",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "String to capitalize words within.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Fulcrum Mobile Data Collection\nPROPER(\"fulcrum mobile data collection\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "QUOTIENT",
            "access": "",
            "virtual": false,
            "description": "QUOTIENT\nReturns the result of dividing one number by another.",
            "parameters": [
                {
                    "name": "dividend",
                    "type": "Number",
                    "description": "The number to divide.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "divisor",
                    "type": "Number",
                    "description": "The number to be divided by.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nQUOTIENT(30, 5)",
                "// returns 0\nQUOTIENT(0, 10)",
                "// returns NaN\nQUOTIENT(45, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RADIANS",
            "access": "",
            "virtual": false,
            "description": "RADIANS\nConverts a number of degrees to radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number of degrees to be converted.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 0.5235987755982988\nRADIANS(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RAND",
            "access": "",
            "virtual": false,
            "description": "RAND\nReturns a random number between 0 and 1.",
            "parameters": [],
            "examples": [
                "// returns true\nRAND() > 0"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "RANDBETWEEN",
            "access": "",
            "virtual": false,
            "description": "RANDBETWEEN\nReturns a random integer between two values.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "Low value of the range.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "Number",
                    "description": "High value of the range.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\n4 < RANDBETWEEN(4, 9) < 9"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "REPEATABLEVALUES",
            "access": "",
            "virtual": false,
            "description": "REPEATABLEVALUES\nReturn a specific field from multiple repeatable items",
            "parameters": [
                {
                    "name": "repeatableVariable",
                    "type": "Object",
                    "description": "The repeatable field variable",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "repeatableDataName",
                    "type": "String",
                    "description": "The data name of the repeatable field for `repeatableVariable`",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "dataName",
                    "type": "String",
                    "description": "The data name of the field to extract from each repeatable item",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns [1,2,3]\nREPEATABLEVALUES($repeatable_field, 'items', 'cost')"
            ],
            "returns": {
                "type": "Array",
                "description": "An array of values of the `dataName` field from each item"
            }
        },
        {
            "name": "REPEATABLESUM",
            "access": "",
            "virtual": false,
            "description": "REPEATABLESUM\nReturn the sum of a specific numeric field across multiple repeatable items",
            "parameters": [
                {
                    "name": "repeatableVariable",
                    "type": "Object",
                    "description": "The repeatable field variable",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "repeatableDataName",
                    "type": "String",
                    "description": "The data name of the repeatable field for `repeatableVariable`",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "dataName",
                    "type": "String",
                    "description": "The data name of the field to extract from each repeatable item",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 6\nREPEATABLESUM($repeatable_field, 'items', 'cost')"
            ],
            "returns": {
                "type": "Number",
                "description": "The sum of the `dataName` field within each repeatable item"
            }
        },
        {
            "name": "REPLACE",
            "access": "",
            "virtual": false,
            "description": "REPLACE\nReplaces a piece of a text string with a different string.",
            "parameters": [
                {
                    "name": "text",
                    "type": "String",
                    "description": "A piece of text to be searched.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "start_position",
                    "type": "Number",
                    "description": "Position within the string to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "num_characters",
                    "type": "Number",
                    "description": "Number of characters in original string to be replaced.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "replacement",
                    "type": "String",
                    "description": "String to replace `num_characters` with.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Fulcrum is a great platform\nREPLACE(\"Fulcrum is a good platform\", 14, 4, \"great\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "RIGHT",
            "access": "",
            "virtual": false,
            "description": "RIGHT\nReturns a substring from the end of a given string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string value from which the right portion will be returned.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "number_of_characters",
                    "type": "Number",
                    "description": "The number of characters to return from the right side of the string.",
                    "default": "1",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns crum\nRIGHT(\"Fulcrum\", 4)",
                "// returns m\nRIGHT(\"Fulcrum\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "ROUND",
            "access": "",
            "virtual": false,
            "description": "ROUND\nRounds a number to a specified number of decimal places according to standard rounding rules.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to be rounded to `places`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of decimal places to which to round `value`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 179.8\nROUND(179.848, 1)",
                "// returns 900\nROUND(918.268, -2)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ROUNDDOWN",
            "access": "",
            "virtual": false,
            "description": "ROUNDDOWN\nRounds a number down to a desired number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of places to which to round down.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 156.82\nROUNDDOWN(156.826, 2)",
                "// returns 156\nROUNDDOWN(156.826, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "ROUNDUP",
            "access": "",
            "virtual": false,
            "description": "ROUNDUP\nRounds a number up to a desired number of decimal places.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to round up.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "places",
                    "type": "Number",
                    "description": "The number of places to which to round up.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 156.83\nROUNDUP(156.826, 2)",
                "// returns 157\nROUNDUP(156.826, 0)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SEARCH",
            "access": "",
            "virtual": false,
            "description": "SEARCH\nReturns the position at which a specified string is first found within a block of text. Ignores case.",
            "parameters": [
                {
                    "name": "search_for",
                    "type": "String",
                    "description": "String to search for within `text_to_search`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "text_to_search",
                    "type": "String",
                    "description": "Text to search for the first instance of `search_for`.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "starting_at",
                    "type": "Number",
                    "description": "argument Position index to begin the search.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 37\nSEARCH(\"collect\", \"Data analysts love Fulcrum for data collection needs\", 12)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SETRESULT",
            "access": "",
            "virtual": false,
            "description": "SETRESULT\nSets the current result value for the current expression. This is useful in multiline expressions to set the result value.",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "the value to set as the result of the expression",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nSETRESULT(1)"
            ],
            "returns": {
                "type": "*",
                "description": "the current result value after the value has been set"
            }
        },
        {
            "name": "SHOWERRORS",
            "access": "",
            "virtual": false,
            "description": "SHOWERRORS\nDescription",
            "parameters": [
                {
                    "name": "show",
                    "type": "Boolean",
                    "description": "Show full error messages. This can help diagnose problems in expressions on the mobile device.",
                    "default": "true",
                    "optional": true,
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns true\nSHOWERRORS()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "SIGN",
            "access": "",
            "virtual": false,
            "description": "SIGN\nReturns the sign of a given input number. `-1` if negative, `1` if positive, `0` if zero.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to return the sign of.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1\nSIGN(43)",
                "// returns -1\nSIGN(-3)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SIN",
            "access": "",
            "virtual": false,
            "description": "SIN\nReturns the sine of a value, in radians.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the sine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns -0.9880316240928618\nSIN(30)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SINH",
            "access": "",
            "virtual": false,
            "description": "SINH\nReturns the hyperbolic sine of a number",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value for which to calculate the hyperbolic sine.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 1.1752011936438014\nSINH(1)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SQRT",
            "access": "",
            "virtual": false,
            "description": "SQRT\nCalculates the square root of a given number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The number for which to calculate the square root.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2.23606797749979\nSQRT(5)",
                "// returns NaN\nSQRT(-9)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SQRTPI",
            "access": "",
            "virtual": false,
            "description": "SQRTPI\nCalculates the square root of the product of Pi and a given number.",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "The value to multiply with Pi and return the square root.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 4.3416075273496055\nSQRTPI(6)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "STATUS",
            "access": "",
            "virtual": false,
            "description": "STATUS\nReturns the current record status value.",
            "parameters": [],
            "examples": [
                "// returns approved\nSTATUS()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "STATUSLABEL",
            "access": "",
            "virtual": false,
            "description": "STATUSLABEL\nReturns the current record status label.",
            "parameters": [],
            "examples": [
                "// returns Approved\nSTATUSLABEL()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "SUBSTITUTE",
            "access": "",
            "virtual": false,
            "description": "SUBSTITUTE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nSUBSTITUTE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SUM",
            "access": "",
            "virtual": false,
            "description": "SUM\nCalculates the sum of a range of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to add together.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 219\nSUM(4, 10, 22, 183)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "SUMSQ",
            "access": "",
            "virtual": false,
            "description": "SUMSQ\nCalculates the sum of the squares of a range of values.",
            "parameters": [
                {
                    "name": "var_args_values",
                    "type": "Number",
                    "description": "Values to square and sum.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 50\nSUMSQ(3, 4, 5)"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "T",
            "access": "",
            "virtual": false,
            "description": "T\nReturns string as text.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to text.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Fulcrum\nT(\"Fulcrum\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TIMEZONE",
            "access": "",
            "virtual": false,
            "description": "TIMEZONE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nTIMEZONE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "TRIM",
            "access": "",
            "virtual": false,
            "description": "TRIM\nStrips the leading and trailing spaces from a string.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns Fulcrum is cross-platform\nTRIM(\"  Fulcrum is cross-platform \")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "TRUE",
            "access": "",
            "virtual": false,
            "description": "TRUE\nReturns the boolean value `true`.",
            "parameters": [],
            "examples": [
                "// returns true\nTRUE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "TYPEOF",
            "access": "",
            "virtual": false,
            "description": "TYPEOF\nReturns the type of a value",
            "parameters": [
                {
                    "name": "value",
                    "type": "*",
                    "description": "A value to get the type of",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns string\nTYPEOF('test')",
                "// returns number\nTYPEOF(1)",
                "// returns boolean\nTYPEOF(true)",
                "// returns null\nTYPEOF(null)",
                "// returns date\nTYPEOF(new Date)",
                "// returns object\nTYPEOF({ name: 'Test' })",
                "// returns array\nTYPEOF([1, 2, 3])"
            ],
            "returns": {
                "type": "String",
                "description": "The type of the value"
            }
        },
        {
            "name": "UPPER",
            "access": "",
            "virtual": false,
            "description": "UPPER\nConverts a specified string to uppercase.",
            "parameters": [
                {
                    "name": "value",
                    "type": "String",
                    "description": "The string to convert to uppercase.",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns EMPIRE STATE BUILDING\nUPPER(\"Empire State Building\")"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "VALUE",
            "access": "",
            "virtual": false,
            "description": "VALUE\nDescription",
            "parameters": [
                {
                    "name": "value",
                    "type": "Number",
                    "description": "argument",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns VALUE\nVALUE()"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "VERSIONINFO",
            "access": "",
            "virtual": false,
            "description": "VERSIONINFO\nReturns version information about the app.",
            "parameters": [],
            "examples": [
                "// returns Apple iPhone6,2, iOS 8.1, Fulcrum 2.7.0 2162\nVERSIONINFO()"
            ],
            "returns": {
                "type": "String",
                "description": ""
            }
        },
        {
            "name": "YEAR",
            "access": "",
            "virtual": false,
            "description": "YEAR\nReturns the year of a given date.",
            "parameters": [
                {
                    "name": "date",
                    "type": "Date",
                    "description": "a date",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "// returns 2015\nYEAR(\"2015/1/1\")"
            ],
            "returns": {
                "type": "Number",
                "description": ""
            }
        },
        {
            "name": "X_ISNEW",
            "access": "",
            "virtual": false,
            "description": "X_ISNEW\nReturns a boolean indicating whether the current feature (record or repeatable item) is new. It returns false if it's being updated.",
            "parameters": [],
            "examples": [
                "// returns true\nX_ISNEW()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        },
        {
            "name": "X_ISUPDATE",
            "access": "",
            "virtual": false,
            "description": "X_ISUPDATE\nReturns a boolean indicating whether the current feature (record or repeatable item) is being updated. It returns false if it's a new record.",
            "parameters": [],
            "examples": [
                "// returns false\nX_ISUPDATE()"
            ],
            "returns": {
                "type": "Boolean",
                "description": ""
            }
        }
    ]
}
