{
    "functions": [
        {
            "name": "ALERT",
            "access": "",
            "virtual": false,
            "description": "ALERT\nDisplay a message as an alert in the mobile app.",
            "parameters": [
                {
                    "name": "title",
                    "type": "String",
                    "description": "A short title for the alert",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "message",
                    "type": "String",
                    "description": "The message content for the alert",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "ALERT('Warning!', 'A depth of 98 feet is high. Are you sure?')\n\n// Displays an alert that looks like\n// +-------------------------------------------+\n// | Warning!                                  |\n// +-------------------------------------------|\n// |                                           |\n// | A depth of 98 feet is high. Are you sure? |\n// |                                           |\n// +-------------------------------------------+"
            ]
        },
        {
            "name": "CURRENTLOCATION",
            "access": "",
            "virtual": false,
            "description": "CURRENTLOCATION\nReturns a location object containing metadata about the user's current location, not the record's location.",
            "parameters": [],
            "examples": [
                "location = CURRENTLOCATION()\n\nif (!location) {\n  // location could not be determined.\n} else {\n  location.latitude  // 35.6443171\n  location.longitude // -80.8984504\n  location.altitude  // 213 - meters\n  location.accuracy  // 5 - meters\n  location.speed     // 3.4 - meters per second\n  location.course    // 213\n  location.timestamp // 1454015950.013456 - ephoch time, seconds\n}"
            ]
        },
        {
            "name": "INVALID",
            "access": "",
            "virtual": false,
            "description": "INVALID\nDisplay a validation error message and stop the record, or repeatable item, from being saved.",
            "parameters": [
                {
                    "name": "message",
                    "type": "String",
                    "description": "The validation error message content for the alert",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "INVALID('Depth must be less than 20.')\n\n// Displays an alert and stops the record from being saved",
                "ON('validate-record', function (event) {\n   if (NUM($depth) >= 20) {\n     INVALID('Depth must be less than 20.')\n   }\n});\n\n// Use with the 'validate-record' event to stop a record from being saved",
                "ON('validate-repeatable', function (event) {\n   if (!ISSELECTED($choice_field, 'Purple')) {\n     INVALID('You gotta pick purple!')\n   }\n});\n\n// Use with the 'validate-repeatable' event to stop a repeatable from being saved"
            ]
        },
        {
            "name": "OFF",
            "access": "",
            "virtual": false,
            "description": "OFF\nDetaches an event handler set by ON.",
            "parameters": [
                {
                    "name": "event",
                    "type": "string",
                    "description": "The event name",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "The function to detach",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "OFF('validate-record', callback)\n\n// Detaches an event handler from the validate-record event",
                "OFF('validate-record')\n\n// Detaches all event handlers listening to the 'validate-record' event"
            ]
        },
        {
            "name": "ON",
            "access": "",
            "virtual": false,
            "description": "ON\nAttaches an event handler that listens for record, repeatable, or field events.",
            "parameters": [
                {
                    "name": "event",
                    "type": "string",
                    "description": "The event name",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "The function to call when the specified event is triggered",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "var callback = function () {\n  if (!(LATITUDE() >= 40 && LATITUDE() <= 41)) {\n    INVALID('Latitude must be between 40 and 41.')\n  }\n}\n\nON('validate-record', callback)\n\n// Listens for 'save-record' events and stops the record from being saved unless it's within a latitude range",
                "var callback = function () {\n  // Do something with the new $weather_summary values\n}\n\nON('change', 'weather_summary', callback)\n\n// Listens for changes to the weather summary field and executes callback",
                "var callback = function () {\n  // Do something with the location via LATITUDE() AND LONGITUDE() values\n}\n\nON('change-geometry', callback)\n\n// Listens for changes to a record's geometry (location) and executes callback",
                "var callback = function () {\n  // Do something with the repeatable location via LATITUDE() AND LONGITUDE() values\n}\n\nON('change-geometry', 'repeatable_item', callback)\n\n// Listens for changes to a repeatable item's geometry and executes callback"
            ]
        },
        {
            "name": "OPENURL",
            "access": "",
            "virtual": false,
            "description": "OPENURL\nOpen a URL for a website or mobile app.",
            "parameters": [
                {
                    "name": "url",
                    "type": "String",
                    "description": "The URL to open",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "OPENURL('https://www.google.com/search?q=Fulcrum+Mobile+Solutions')\n\n// Opens a web browser to the specified address",
                "OPENURL('comgooglemaps://?q=Pizza&center=37.759748,-122.427135')\n\n// Opens google maps and searches for Pizza near a location",
                "OPENURL('mailto:clark.griswold@gmail.com?subject=turn+those+lights+off!&body=jk,+i+love+them.')\n\n// Opens an email client with a predefined subject and body"
            ]
        },
        {
            "name": "PROGRESS",
            "access": "",
            "virtual": false,
            "description": "PROGRESS\nDisplay a non-dismissible progress message in the mobile app.",
            "parameters": [
                {
                    "name": "title",
                    "type": "String",
                    "description": "A short title for the progress message",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "message",
                    "type": "String",
                    "description": "The message content for the progress alert",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "PROGRESS('Just a sec!', 'Searching for nearby facilities ...')\n\n// Displays an progress message that looks like\n// +-------------------------------------------+\n// | Just a sec!                               |\n// +-------------------------------------------|\n// |                                           |\n// | Searching for nearby facilities ...       |\n// |                                           |\n// +-------------------------------------------+",
                "PROGRESS()\n\n// Call with no parameters to dismiss the progress message."
            ]
        },
        {
            "name": "REQUEST",
            "access": "",
            "virtual": false,
            "description": "REQUEST\nPerforms an HTTP request and executes the callback on completion.",
            "parameters": [
                {
                    "name": "options",
                    "type": "Object",
                    "description": "The options to pass for the request",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "options.url",
                    "type": "string",
                    "description": "The url for the request",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "options.method",
                    "type": "string",
                    "description": "The HTTP method for the request (POST, PUT, DELETE, etc.)",
                    "default": "GET",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.followRedirect",
                    "type": "boolean",
                    "description": "Should the request follow any redirects",
                    "default": true,
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.headers",
                    "type": "Object",
                    "description": "An object containing keys and values for additional header items",
                    "default": "{}",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.qs",
                    "type": "Object",
                    "description": "An object containing query string parameters (url parameters)",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.json",
                    "type": "Object",
                    "description": "An object to be passed in the request body, must be `JSON.stringify`able",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "options.body",
                    "type": "string",
                    "description": "The request body to send with a POST or PUT request",
                    "default": "",
                    "optional": true,
                    "nullable": ""
                },
                {
                    "name": "callback",
                    "type": "function",
                    "description": "The function to call when the request is complete - The function is passed `error`, `response`, and `body` parameters",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "options = {\n  url: 'https://api.forecast.io/forecast/your_api_key/40,-100'\n}\n\nfunction callback(error, response, body) {\n  if (error) {\n    ALERT('Error with request: ' + error)\n  } else {\n    weather = JSON.parse(body)\n    SETVALUE('weather_summary', weather.currently.summary)\n  }\n}\n\nREQUEST(options, callback);\n\n// Performs a request with options and execute callback on completion"
            ]
        },
        {
            "name": "SETCHOICEFILTER",
            "access": "",
            "virtual": false,
            "description": "SETCHOICEFILTER\nFilter the choices in a choice field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "filter",
                    "type": [
                        "String",
                        "Array",
                        "null"
                    ],
                    "description": "The string or strings to filter choices by",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETCHOICEFILTER('weather_summary', 'cat')\n\n// Filters the choices in the weather summary field to those that contain 'cat'",
                "SETCHOICEFILTER('weather_summary', ['cat', 'dog'])\n\n// Filters the choices in the weather summary field to those that contain 'cat' or 'dog'",
                "SETCHOICEFILTER('weather_summary', null)\n\n// Unsets any filter previously set by SETCHOICEFILTER and applies no filter"
            ]
        },
        {
            "name": "SETCHOICES",
            "access": "",
            "virtual": false,
            "description": "SETCHOICES\nSet the available choices for a choice field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "choices",
                    "type": [
                        "Array",
                        "null"
                    ],
                    "description": "The choices for the choice field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "choices = ['Rain', 'Hail', 'Snow', 'Graupel']\nSETCHOICES('weather_summary', choices)\n\n// Sets the available choices of the weather summary field to an array of values",
                "choices = [\n  ['Light Rain', 'light_rain'],\n  ['Heavy Rain', 'heavy_rain']\n]\nSETCHOICES('weather_summary', choices)\n\n// Sets the available choices of the weather summary field to an array of labels and values in [<label>, <value>] order",
                "choices = [\n  { label: 'Light Rain', value: 'light_rain' },\n  { label: 'Heavy Rain', value: 'heavy_rain' }\n]\nSETCHOICES('weather_summary', choices)\n\n// Sets the available choices of the weather summary field to an array of labels and values in an object containing \"label\" and \"value\" keys",
                "SETCHOICES('weather_summary', null)\n\n// Unsets any override previously set by SETCHOICES and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETDESCRIPTION",
            "access": "",
            "virtual": false,
            "description": "SETDESCRIPTION\nSet the description of a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to set for the field's description",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETDESCRIPTION('weather_summary', 'Could not automatically fetch weather data. Briefly describe the current weather.')\n\n// Sets the description of a weather summary field"
            ]
        },
        {
            "name": "SETHIDDEN",
            "access": "",
            "virtual": false,
            "description": "SETHIDDEN\nSet the visibility of a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "hidden",
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "description": "Boolean value representing whether the field should be hidden",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETHIDDEN('weather_summary', true)\n\n// Hides the weather summary field",
                "SETHIDDEN('weather_summary', false)\n\n// Shows the weather summary field",
                "SETHIDDEN('weather_summary', null)\n\n// Unsets any override previously set by SETHIDDEN and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETLABEL",
            "access": "",
            "virtual": false,
            "description": "SETLABEL\nSet the label of a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "hidden",
                    "type": [
                        "String",
                        "null"
                    ],
                    "description": "The text for the field label",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETLABEL('weather_summary', 'Weather Report')\n\n// Sets the field's label to 'Weather Report'",
                "SETLABEL('weather_summary', null)\n\n// Unsets any override previously set by SETLABEL and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETLOCATION",
            "access": "",
            "virtual": false,
            "description": "SETLOCATION\nSet the location of a record.",
            "parameters": [
                {
                    "name": "latitude",
                    "type": "number",
                    "description": "The new latitude of the record",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "longitude",
                    "type": "number",
                    "description": "The new longitude of the record",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETLOCATION(35.5946167, -80.8638915)\n\n// Sets the location of a record"
            ]
        },
        {
            "name": "SETMAXLENGTH",
            "access": "",
            "virtual": false,
            "description": "SETMAXLENGTH\nSet the maximum length for a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "length",
                    "type": [
                        "number",
                        "null"
                    ],
                    "description": "The maximum length of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETMAXLENGTH('weather_summary', 25)\n\n// Sets the maximum length of the weather summary field to 25",
                "SETMAXLENGTH('weather_summary', null)\n\n// Unsets any override previously set by SETMAXLENGTH and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETMINLENGTH",
            "access": "",
            "virtual": false,
            "description": "SETMINLENGTH\nSet the minimum length for a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "length",
                    "type": [
                        "number",
                        "null"
                    ],
                    "description": "The minimum length of the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETMINLENGTH('weather_summary', 25)\n\n// Sets the minimum length of the weather summary field to 25",
                "SETMINLENGTH('weather_summary', null)\n\n// Unsets any override previously set by SETMINLENGTH and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETPROJECT",
            "access": "",
            "virtual": false,
            "description": "SETPROJECT\nSet the project of a record.",
            "parameters": [
                {
                    "name": "project",
                    "type": "String",
                    "description": "The project for the record",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETPROJECT('Bells Crossing Phase 3')\n\n// Sets the project of a record"
            ]
        },
        {
            "name": "SETREQUIRED",
            "access": "",
            "virtual": false,
            "description": "SETREQUIRED\nSet whether or not a field is required.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "hidden",
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "description": "Boolean value representing whether the field should be required",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETREQUIRED('weather_summary', true)\n\n// Sets the weather summary field as required",
                "SETREQUIRED('weather_summary', false)\n\n// Sets the weather summary field as not required",
                "SETREQUIRED('weather_summary', null)\n\n// Unsets any override previously set by SETREQUIRED and uses the original setting from the form schema"
            ]
        },
        {
            "name": "SETSTATUS",
            "access": "",
            "virtual": false,
            "description": "SETSTATUS\nSet the status of a record.",
            "parameters": [
                {
                    "name": "status",
                    "type": "String",
                    "description": "The status value for the record",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETSTATUS('inspection_pending')\n\n// Sets the status of a record"
            ]
        },
        {
            "name": "SETSTATUSFILTER",
            "access": "",
            "virtual": false,
            "description": "SETSTATUSFILTER\nSet the allowable status values for a record.",
            "parameters": [
                {
                    "name": "statuses",
                    "type": [
                        "Array",
                        "null"
                    ],
                    "description": "The allowable status values for the record",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETSTATUSFILTER(['inspection_pending', 'in_inspection'])\n\n// Sets the allowable status values for the record to be 'inspection_pending' or 'in_inspection'",
                "SETSTATUSFILTER(null)\n\n// Unsets any previous status filters and allows any status to be selected for the record"
            ]
        },
        {
            "name": "SETVALUE",
            "access": "",
            "virtual": false,
            "description": "SETVALUE\nSet the value of a field.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name for the field to set",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "value",
                    "type": "String",
                    "description": "The value to set for the field",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETVALUE('weather_summary', 'Just beautiful')\n\n// Sets the value of a weather summary field"
            ]
        },
        {
            "name": "SETREADONLY",
            "access": "",
            "virtual": false,
            "description": "SETREADONLY\nSets a field to be read-only or editable.",
            "parameters": [
                {
                    "name": "field",
                    "type": "String",
                    "description": "The data name",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                },
                {
                    "name": "readOnly",
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "description": "Boolean value representing whether the field should be read-only",
                    "default": "",
                    "optional": "",
                    "nullable": ""
                }
            ],
            "examples": [
                "SETREADONLY('weather_summary', true)\n\n// Sets the field to read only, not editable by the user",
                "SETREADONLY('weather_summary', false)\n\n// Sets the field to be active, editable by the user",
                "SETREADONLY('weather_summary', null)\n\n// Unsets any override previously set by SETREADONLY and uses the original setting from the form schema"
            ]
        },
        {
            "name": "STORAGE",
            "access": "",
            "virtual": false,
            "description": "STORAGE\nReturns a storage object for setting and getting local storage items.",
            "parameters": [],
            "examples": [
                "storage = STORAGE()\nKEY = 'item_key'\nstorage.setItem(KEY, 'hello world')\n\n// Sets an item in local storage, must be a string",
                "item = storage.getItem(KEY)\n\n// Gets an item from storage if it exists, otherwise returns null",
                "geom = { type: 'Point', coordinates: [-100, 40] }\nstorage.setItem('geometry', JSON.stringify(geom))\n\nanotherGeom = JSON.parse(storage.getItem('geometry'))\n\n// Use JSON.stringify and JSON.parse to serialize and deserialize objects in local storage",
                "storage.removeItem(KEY)\n\n// Removes an item from storage",
                "storage.clear()\n\n// Removes all items from storage"
            ]
        }
    ]
}
